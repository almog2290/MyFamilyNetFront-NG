pipeline{
    agent {
        label 'ubuntu'
    }
    parameters {
        string(name: 'APP_URL', defaultValue: 'http://40.0.0.84', description: 'Application URL')
        string(name: 'APP_API_IP', defaultValue: '/api', description: 'API Gateway IP')
        string(name: 'APP_KEYCLOAK_URL', defaultValue: 'https://keycloakmyfamilynet.local.moglidev.xyz', description: 'Keycloak URL')
        string(name: 'APP_KEYCLOAK_REALM', defaultValue: 'my-family-net', description: 'Keycloak Realm')
        string(name: 'APP_KEYCLOAK_CLIENT_ID', defaultValue: 'my-family-net-app', description: 'Keycloak Client ID')
    }
    environment {
        APP_NAME = 'my-family-net-front-ng'
        DOCKER_REGISTRY = "registry.moglidev.xyz"
        DOCKER_AUTH = 'moglidev-registry-cred' 
        IMAGE_NAME = "${DOCKER_REGISTRY}/${APP_NAME}"
        APP_URL = "${params.APP_URL}"
        APP_API_IP = "${params.APP_API_IP}"
        APP_KEYCLOAK_URL = "${params.APP_KEYCLOAK_URL}"
        APP_KEYCLOAK_REALM = "${params.APP_KEYCLOAK_REALM}"
        APP_KEYCLOAK_CLIENT_ID = "${params.APP_KEYCLOAK_CLIENT_ID}"
    }
    stages{
        stage('Cleanup workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout for SCM'){
            steps{
                git branch: 'main', credentialsId: 'gitea-jenkins', url: 'https://gitea.moglidev.xyz/mamba/MyFamilyNetFront-NG.git'
            }
        }
        stage('Load Utils') {
            steps {
                script {
                    utils = load 'jenkins/jenkinsUtils.groovy'
                    if (utils == null) {
                        error('Failed to load utils')
                    }
                }
            }
        }
        stage('Extract Version from package.json'){
            steps{
                script {
                    env.RELEASE_VERSION = sh(script: "jq -r '.version' package.json", returnStdout: true).trim()
                    env.IMAGE_TAG = "${RELEASE_VERSION}-${BUILD_NUMBER}"
                    
                    
                    sh "echo 'Release version is => ${env.RELEASE_VERSION}' "
                    
                    sh "echo 'Image tag is => ${env.IMAGE_TAG}'"
                }
            }
        }
        stage('Build'){
            steps{
                script{
                    nodejs('NodeJS-20.11') {
                        sh 'npm install'
                        sh 'npm run build --prod'
                    }
                }
            }
        }
        stage('Build & Push Docker Image'){
            steps{
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_AUTH) {

                        // Buildx (Builder instance)
                        sh 'docker buildx create --name mybuilder-frontend --driver docker-container --use'
                        sh 'docker buildx inspect mybuilder-frontend --bootstrap'

                        // Build and push multi-architecture images
                        sh """
                        docker buildx build --platform linux/amd64,linux/arm64 \
                        --build-arg APP_URL=${APP_URL} \
                        --build-arg APP_API_IP=${APP_API_IP} \
                        --build-arg APP_KEYCLOAK_URL=${APP_KEYCLOAK_URL} \
                        --build-arg APP_KEYCLOAK_REALM=${APP_KEYCLOAK_REALM} \
                        --build-arg APP_KEYCLOAK_CLIENT_ID=${APP_KEYCLOAK_CLIENT_ID} \
                        -t ${IMAGE_NAME}:${IMAGE_TAG} -t ${IMAGE_NAME}:latest -f docker/Dockerfile . --push
                        """
                                                
                        // Remove the builder instance
                        sh 'docker buildx rm'
                    }
                }
            }
        }
        stage("Trigger CD (Gitops) Pipeline") {
            steps {
                script {
                    build job: 'myfamilynet-front-ng-gitops-cd', 
                        parameters: [string(name: 'IMAGE_TAG', value: "${IMAGE_TAG}" , description: 'Docker Image Version')], 
                        propagate: false, 
                        wait: false
                }
            }
        }
    }
    post{
        always{
            script{
                def notifyStatus = currentBuild.result ?: 'UNKNOWN'
                notification = [
                    notifyStatus: notifyStatus ,
                    channel: '#operations',
                    message: "Job ${env.JOB_NAME} [${env.BUILD_NUMBER}] has ${notifyStatus}. URL Results : ${env.BUILD_URL}"
                ]

                utils.slackSendNotification(notification)
            }
        }
    }
}